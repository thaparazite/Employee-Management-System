Consider a scenario where you are tasked with developing a system to manage employee data for a 
medium-sized company. Each employee is identified by a unique employee ID (a 4-digit number e.g. 
1234) and the system also records the employee’s name and department (valid departments are, “HR”, 
“Development”, “Sales”, and “Finance”). The system needs to efficiently store and retrieve employee 
information using a binary search tree (BST) that specifies the following operations:

a) Develop a custom class called Employee that will hold employee information. The developed custom 
class will also implement the Comparable Java interface and provide natural ordering for employees.

b) Implement methods for inserting a new employee into the BST and for searching for an employee 
based on their employee ID. 

c) Provide a method to return all employee records in the BST and print details of each record based on 
the numerical sequence of their employee ID.

d) Allow for deleting an employee from the BST based on their employee ID.

The behavior of the BST will be described using a Java interface. Additionally, create a main method to 
demonstrate each of the BST methods implemented above and also to test the operation of the BST 
taking all of the major logical paths through the code you have implemented into consideration.

The Employee Management System is a Java application designed to efficiently manage employee data for a medium-sized company. It utilizes a binary search tree (BST) data structure to store and organize employee records. Each employee is identified by a unique employee ID, which is a 4-digit number, along with their name and department.

The system provides the following functionality:

Insertion: Employees can be added to the system by providing their employee ID, name, and department. The system ensures that employee records are inserted in a sorted manner based on their employee ID.
Search: Users can search for employees by their employee ID. The system quickly retrieves the employee's details, including their name and department.
Deletion: Employees can be removed from the system by specifying their employee ID. The system efficiently deletes the employee record while maintaining the integrity of the binary search tree.
Printing Records: The system allows for printing all employee records in ascending order of their employee IDs. This feature provides a comprehensive view of all employees in the company.
The Employee Management System offers a user-friendly interface for interacting with employee data, ensuring efficient management and retrieval of information. It is designed to be scalable, allowing for the seamless addition, removal, and retrieval of employee records as the company grows.

